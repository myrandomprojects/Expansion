//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expansion_CSharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class GPURenderer {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal GPURenderer() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Expansion_CSharp.GPURenderer", typeof(GPURenderer).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;matrix.h&quot;
        ///
        ///#endif
        ///
        ///kernel void clear(global RenderTexture* canvas, global uchar4* color)
        ///{
        ///	const int2 pos = { get_global_id(0), get_global_id(1) };
        ///	global Pixel* pix = getPixel(canvas, pos);
        ///
        ///	pix-&gt;color = *color;
        ///	pix-&gt;depth = 1;
        ///	pix-&gt;gleam = 0;
        ///}
        ///.
        /// </summary>
        internal static string clear {
            get {
                return ResourceManager.GetString("clear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;types.h&quot;
        ///
        ///#endif
        ///
        ///kernel void finalize(global RenderTexture* canvas, write_only image2d_t screen)
        ///{
        ///	const int2 pos = { get_global_id(0), get_global_id(1) };
        ///	global Pixel* pix = getPixel(canvas, pos);
        ///
        ///	uchar4 color = pix-&gt;color.zyxw;
        ///
        ///	write_imageui(screen, pos, convert_uint4(color)); // /((float4)255.0f)
        ///}
        ///.
        /// </summary>
        internal static string finalize {
            get {
                return ResourceManager.GetString("finalize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;types.h&quot;
        ///struct float16 { float f[16]; };
        ///
        ///#endif
        ///
        ///typedef union {
        ///	float16 d16;
        ///	float d[16];
        ///	float dd[4][4];
        ///} matrix;
        ///
        ///matrix newmatrix(float16 vals)
        ///{
        ///	matrix m;
        ///	m.d16 = vals;
        ///	return m;
        ///}
        ///matrix matrix_identity()
        ///{
        ///	return newmatrix((float16)(
        ///		1, 0, 0, 0,
        ///		0, 1, 0, 0,
        ///		0, 0, 1, 0,
        ///		0, 0, 0, 1
        ///	));
        ///}
        ///
        ///matrix mat_mul(matrix a, matrix b)
        ///{
        ///	matrix res;
        ///	for (int i = 0; i &lt; 4; ++i)
        ///		for (int j = 0; j &lt; 4; ++j) {
        ///			res.dd[i][j] = 0;
        ///			for [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string matrix {
            get {
                return ResourceManager.GetString("matrix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;matrix.h&quot;
        ///
        ///#endif
        ///
        ///ushort min3(ushort a, ushort b, ushort c)
        ///{
        ///	return (a &lt; b &amp;&amp; a &lt; c ? a : (b &lt; c ? b : c));
        ///}
        ///
        ///ushort max3(ushort a, ushort b, ushort c)
        ///{
        ///	return (a &gt; b &amp;&amp; a &gt; c ? a : (b &gt; c ? b : c));
        ///}
        ///
        /////, global Triangle* triangles
        /////, global uint* indices
        ///kernel void project(global Vertex* vertices, global Vertex* outVertices, global Transform* transformValues, global WorldSettings* worldSettings)
        ///{
        ///	worldSettings-&gt;triangleCount = get_global_size(0) / 3; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string project {
            get {
                return ResourceManager.GetString("project", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;matrix.h&quot;
        ///
        ///#endif
        ///
        ///#define COLOR(r,g,b) (float3)(r,g,b)
        ///
        ///float fmin3(float a, float b, float c)
        ///{
        ///	return (a &lt; b &amp;&amp; a &lt; c ? a : (b &lt; c ? b : c));
        ///}
        ///
        ///float fmax3(float a, float b, float c)
        ///{
        ///	return (a &gt; b &amp;&amp; a &gt; c ? a : (b &gt; c ? b : c));
        ///}
        ///
        ///
        ///float3 sampleTexture(read_only image2d_t tex, const float2 uv)
        ///{
        ///	const sampler_t texsampler = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_NONE | CLK_FILTER_NEAREST;
        ///
        ///	float3 color = convert_float3(read_imageui(tex, texsample [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string rasterize {
            get {
                return ResourceManager.GetString("rasterize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#define kernel
        ///#define global
        ///#define read_only
        ///#define write_only
        ///#define get_global_id(i) 0
        ///
        ///
        ///typedef unsigned char uchar;
        ///typedef unsigned short ushort;
        ///typedef unsigned int uint;
        ///typedef unsigned long long ulong;
        ///typedef float half;
        ///struct int2 { int x, y; };
        ///struct float2 { float x, y; };
        ///struct float3 { float x, y, z; };
        ///struct float4 { float x, y, z, w; };
        ///struct float16 { float f[16]; };
        ///struct uchar4 { uchar x, y, z, w; };
        ///struct ushort2 { ushort x, y; };
        ///struct  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string types {
            get {
                return ResourceManager.GetString("types", resourceCulture);
            }
        }
    }
}
