//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expansion_CSharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class GPURenderer {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal GPURenderer() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Expansion_CSharp.GPURenderer", typeof(GPURenderer).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;matrix.h&quot;
        ///
        ///#endif
        ///
        ///typedef struct {
        ///	int2 binSize;
        ///	int2 binsCount;
        ///} BinSettings;
        ///
        ///typedef union {
        ///	ulong4 vec;
        ///	uchar bytes[32];
        ///} Batch;
        ///
        ///bool rectanglesIntersect(float4 a, float4 b)
        ///{
        ///	float2 pt = (b.xy + b.zw);
        ///
        ///	return (pt.x &gt;= a.x &amp;&amp; pt.x &lt;= a.x + a.z + b.z
        ///		&amp;&amp; pt.y &gt;= a.y &amp;&amp; pt.y &lt;= a.y + a.w + b.w);
        ///}
        ///
        ///kernel void bin(
        ///	//global const Triangle* triangles,
        ///	global const TriangleBounds* triBounds,
        ///	global WorldSettings* worldSettings,
        ///	global Batc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string bin {
            get {
                return ResourceManager.GetString("bin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;matrix.h&quot;
        ///
        ///#endif
        ///
        ///kernel void clear(global RenderTexture* canvas, global uchar4* color)
        ///{
        ///	const int2 pos = { get_global_id(0), get_global_id(1) };
        ///	global Pixel* pix = getPixel(canvas, pos);
        ///
        ///	pix-&gt;color = *color;
        ///	pix-&gt;depth = 1;
        ///	pix-&gt;gleam = 0;
        ///}
        ///.
        /// </summary>
        internal static string clear {
            get {
                return ResourceManager.GetString("clear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;types.h&quot;
        ///
        ///#endif
        ///
        ///kernel void finalize(global RenderTexture* canvas, write_only image2d_t screen)
        ///{
        ///	const int2 pos = { get_global_id(0), get_global_id(1) };
        ///	global Pixel* pix = getPixel(canvas, pos);
        ///
        ///	uchar4 color = pix-&gt;color.zyxw;
        ///
        ///	write_imageui(screen, pos, convert_uint4(color)); // /((float4)255.0f)
        ///}
        ///.
        /// </summary>
        internal static string finalize {
            get {
                return ResourceManager.GetString("finalize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;types.h&quot;
        /////struct float16 { float f[16]; };
        ///
        ///#define MM {
        ///#define _MM }
        ///
        ///#else
        ///#define MM (float16)(
        ///#define _MM )
        ///#endif
        ///
        ///typedef union MMMM {
        ///	float16 d16;
        ///	float d[16];
        ///	float dd[4][4];
        ///#ifdef _WIN32
        ///	MMMM() {}
        ///	template&lt;class... Targs&gt;
        ///	MMMM(Targs... args)
        ///	{
        ///		float dummy[sizeof...(args)] = { args... };
        ///		for (int i = 0; i &lt; sizeof...(args); ++i)
        ///			d[i] = dummy[i];
        ///	}
        ///#endif
        ///} matrix;
        ///
        ///inline matrix newmatrix(float16 vals)
        ///{
        ///	matrix m;
        ///	m.d16 =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string matrix {
            get {
                return ResourceManager.GetString("matrix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;matrix.h&quot;
        ///
        ///#endif
        ///
        ///ushort min2(ushort a, ushort b)
        ///{
        ///	return a &lt; b ? a : b;
        ///}
        ///ushort max2(ushort a, ushort b)
        ///{
        ///	return a &gt; b ? a : b;
        ///}
        ///ushort min3(ushort a, ushort b, ushort c)
        ///{
        ///	return (a &lt; b &amp;&amp; a &lt; c ? a : (b &lt; c ? b : c));
        ///}
        ///ushort max3(ushort a, ushort b, ushort c)
        ///{
        ///	return (a &gt; b &amp;&amp; a &gt; c ? a : (b &gt; c ? b : c));
        ///}
        ///
        ///VertexOut clip(VertexOut a, VertexOut b)
        ///{
        ///	half16 res = a.f16 + (b.f16 - a.f16) * ((1 - a.loc.z) / (b.loc.z - a.loc.z));
        ///	return *(Ver [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string project {
            get {
                return ResourceManager.GetString("project", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///
        ///#include &quot;types.h&quot;
        ///
        ///#endif
        ///
        ///#define COLOR(r,g,b) (float3)(r,g,b)
        ///
        ///float fmin3(float a, float b, float c)
        ///{
        ///	return (a &lt; b &amp;&amp; a &lt; c ? a : (b &lt; c ? b : c));
        ///}
        ///
        ///float fmax3(float a, float b, float c)
        ///{
        ///	return (a &gt; b &amp;&amp; a &gt; c ? a : (b &gt; c ? b : c));
        ///}
        ///
        ///
        ///
        ///
        ///
        ///typedef struct {
        ///	float2 samples[17];
        ///	int count;
        ///} UVSamples;
        ///
        ///
        ///float3 sampleTexture(read_only image2d_t tex, const float2 uv)
        ///{
        ///	const sampler_t texsampler = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_NONE | CLK_F [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string rasterize {
            get {
                return ResourceManager.GetString("rasterize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ifdef _WIN32
        ///#pragma once
        ///#include &lt;cmath&gt;
        ///
        ///#define kernel
        ///#define local
        ///#define global
        ///#define read_only
        ///#define write_only
        ///#define get_global_id(i) 0
        ///#define get_global_size(i) 1
        ///#define get_local_id(i) 0
        ///#define get_local_size(i) 0
        ///
        ///#define CLK_LOCAL_MEM_FENCE
        ///#define CLK_GLOBAL_MEM_FENCE
        ///#define barrier(x)
        ///#define async_work_group_copy(target, src, num_elements, out) 0
        ///#define wait_group_events(n, event)
        ///
        ///#define CLK_NORMALIZED_COORDS_TRUE 1
        ///#define CLK_ADDRESS_NONE 2
        ///#define CLK_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string types {
            get {
                return ResourceManager.GetString("types", resourceCulture);
            }
        }
    }
}
