#ifdef _WIN32

#define kernel
#define global
#define read_only
#define write_only
#define get_global_id(i) 0


typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long long ulong;
typedef float half;
struct int2 { int x, y; };
struct float2 { float x, y; };
struct float3 { float x, y, z; };
struct float4 { float x, y, z, w; };
struct float16 { float f[16]; };
struct uchar4 { uchar x, y, z, w; };
struct ushort2 { ushort x, y; };
struct uint4 { uint x, y, z, w; };

#define COORD(x,y) int2(x,y)
typedef uchar4 image2d_t[100];

void write_imageui(image2d_t, int2, uint4);

#else
#define COORD(x,y) (int2)(x,y)
#endif

typedef struct {
	uchar4 color;
	half depth, gleam;
} Pixel;

typedef struct {
	Pixel pixels[4096 * 4096];
} RenderTexture;

typedef union {
	float16 f16;
	float vals[16];
	//float4 loc;
	//float3 normal, tangent, binormal;
	//float2 uv, screenPos;
} Vertex;

float3 loc(const Vertex v) { return (float3)(v.vals[0], v.vals[1], v.vals[2]); }
float3 normal(const Vertex v) { return (float3)(v.vals[3], v.vals[4], v.vals[5]); }
float3 tangent(const Vertex v) { return (float3)(v.vals[6], v.vals[7], v.vals[8]); }
float3 binormal(const Vertex v) { return (float3)(v.vals[9], v.vals[10], v.vals[11]); }
float2 uv(const Vertex v) { return (float2)(v.vals[12], v.vals[13]); }

void vset2(Vertex* v, float2 f, int i) { v->vals[i] = f.x; v->vals[i + 1] = f.y; }
void vset3(Vertex* v, float3 f, int i) { v->vals[i] = f.x; v->vals[i + 1] = f.y; v->vals[i + 2] = f.z; }

Vertex vmul(Vertex v, float f) { v.f16 *= f; return v; } //{ return (Vertex) { v.loc*f, v.normal*f, v.uv*f }; }
Vertex vadd(Vertex v1, Vertex v2) { v1.f16 += v2.f16; return v1; } //{ return (Vertex) { v1.loc + v2.loc, v1.normal + v2.normal, v1.uv + v2.uv }; }

typedef struct {
	ushort2 pmin, pmax;
	uchar isVisible;
	uchar isClockwise;
} Triangle;


typedef struct {
	union {
		float3 lightDir;
		struct {
			int; int; int;
			int triangleCount;
		};
	};
	struct Camera {
		float2 screenSize;
	} camera;

} WorldSettings;







float4 reflect(float4 d, float4 n) { return d - 2 * dot(d, n)*n; }

global Pixel* getPixel(global RenderTexture* canvas, const int2 pos)
{
	const int2 size = { get_global_size(0), get_global_size(1) };

	return &canvas->pixels[pos.y*size.x + pos.x];
}

#ifdef _WIN32

#include "types.h"
struct float16 { float f[16]; };

#endif

typedef union {
	float16 d16;
	float d[16];
	float dd[4][4];
} matrix;

matrix newmatrix(float16 vals)
{
	matrix m;
	m.d16 = vals;
	return m;
}

matrix matrix_translate(float3 loc)
{
	return newmatrix((float16)(
		1, 0, 0, loc.x,
		0, 1, 0, loc.y,
		0, 0, 1, loc.z,
		0, 0, 0, 1
	));
}

matrix matrix_scale(float3 scale)
{
	return newmatrix((float16)(
		scale.x, 0, 0, 0,
		0, scale.y, 0, 0,
		0, 0, scale.z, 0,
		0, 0, 0, 1
	));
}

matrix matrix_rotation_pitch(float angle)
{
	float c = cos(angle);
	float s = sin(angle);
	return newmatrix((float16)(
		c, s, 0, 0,
		-s, c, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1
	));
}

matrix matrix_rotation_roll(float angle)
{
	float c = cos(angle);
	float s = sin(angle);
	return newmatrix((float16)(
		c, 0, s, 0,
		0, 1, 0, 0,
		-s, 0, c, 0,
		0, 0, 0, 1
	));
}


matrix matrix_rotation_yaw(float angle)
{
	float c = cos(angle);
	float s = sin(angle);
	return newmatrix((float16)(
		1, 0, 0, 0,
		0, c, s, 0,
		0, -s, c, 0,
		0, 0, 0, 1
	));
}

matrix mat_mul(matrix a, matrix b)
{
	matrix res;
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < 4; ++j) {
			res.dd[i][j] = 0;
			for (int k = 0; k < 4; ++k)
				res.dd[i][j] += a.dd[i][k] * b.dd[k][j];
		}
	return res;
}

float4 vec_mat_mul(float4 v, matrix m)
{
	union { float4 f; float vals[4]; } a, c;
	a.f = v;
	a.vals[3] = 1;

	for (int i = 0; i < 3; i++) {
		c.vals[i] = 0;
		for (int j = 0; j < 4; j++)
			c.vals[i] += m.dd[i][j] * a.vals[j];
	}

	return c.f;
}

matrix matrix_rotation(float3 angle)
{
	return mat_mul(mat_mul(
		matrix_rotation_pitch(angle.z), 
		matrix_rotation_yaw(angle.x)),
		matrix_rotation_roll(angle.y)
	);
}

typedef struct {
	float4 loc, rot, scale;
} Transform;

matrix get_transform_matrix(const Transform t)
{
	return mat_mul(mat_mul(
		matrix_translate(t.loc.xyz),
		matrix_rotation(t.rot.xyz)),
		matrix_scale(t.scale.xyz)
	);
}

#ifdef _WIN32

#include "matrix.h"

#endif

kernel void clear(global RenderTexture* canvas, global uchar4* color)
{
	const int2 pos = { get_global_id(0), get_global_id(1) };
	global Pixel* pix = getPixel(canvas, pos);

	pix->color = *color;
	pix->depth = 1;
	pix->gleam = 0;
}

#ifdef _WIN32

#include "types.h"

#endif

kernel void finalize(global RenderTexture* canvas, write_only image2d_t screen)
{
	const int2 pos = { get_global_id(0), get_global_id(1) };
	global Pixel* pix = getPixel(canvas, pos);

	uchar4 color = pix->color.zyxw;

	write_imageui(screen, pos, convert_uint4(color)); // /((float4)255.0f)
}

#ifdef _WIN32

#include "matrix.h"

#endif
/*
kernel void generateTangentBinormal(global Vertex* vertices, global uint* indices)
{
	int t = get_global_id(0)*3;
	Vertex v1 = vertices[indices[t + 0]],
		   v2 = vertices[indices[t + 1]],
		   v3 = vertices[indices[t + 2]];

	float3 vector1, vector2;
	float2 vtU, vtV;
	float den;
	float length;


	// Calculate the two vectors for this face.
	vector1 = loc(v2) - loc(v1);

	vector2 = loc(v3) - loc(v1);
	vector2[1] = vertex3.y - vertex1.y;
	vector2[2] = vertex3.z - vertex1.z;

	// Calculate the tu and tv texture space vectors.
	tuVector[0] = vertex2.tu - vertex1.tu;
	tvVector[0] = vertex2.tv - vertex1.tv;

	tuVector[1] = vertex3.tu - vertex1.tu;
	tvVector[1] = vertex3.tv - vertex1.tv;

	// Calculate the denominator of the tangent/binormal equation.
	den = 1.0f / (tuVector[0] * tvVector[1] - tuVector[1] * tvVector[0]);

	// Calculate the cross products and multiply by the coefficient to get the tangent and binormal.
	tangent.x = (tvVector[1] * vector1[0] - tvVector[0] * vector2[0]) * den;
	tangent.y = (tvVector[1] * vector1[1] - tvVector[0] * vector2[1]) * den;
	tangent.z = (tvVector[1] * vector1[2] - tvVector[0] * vector2[2]) * den;

	binormal.x = (tuVector[0] * vector2[0] - tuVector[1] * vector1[0]) * den;
	binormal.y = (tuVector[0] * vector2[1] - tuVector[1] * vector1[1]) * den;
	binormal.z = (tuVector[0] * vector2[2] - tuVector[1] * vector1[2]) * den;

	// Calculate the length of this normal.
	length = sqrt((tangent.x * tangent.x) + (tangent.y * tangent.y) + (tangent.z * tangent.z));

	// Normalize the normal and then store it
	tangent.x = tangent.x / length;
	tangent.y = tangent.y / length;
	tangent.z = tangent.z / length;

	// Calculate the length of this normal.
	length = sqrt((binormal.x * binormal.x) + (binormal.y * binormal.y) + (binormal.z * binormal.z));

	// Normalize the normal and then store it
	binormal.x = binormal.x / length;
	binormal.y = binormal.y / length;
	binormal.z = binormal.z / length;

}*/
#ifdef _WIN32

#include "matrix.h"

#endif

ushort min3(ushort a, ushort b, ushort c)
{
	return (a < b && a < c ? a : (b < c ? b : c));
}

ushort max3(ushort a, ushort b, ushort c)
{
	return (a > b && a > c ? a : (b > c ? b : c));
}

//, global Triangle* triangles
//, global uint* indices
kernel void project(global Vertex* vertices, global Vertex* outVertices, global Transform* transformValues, global WorldSettings* worldSettings)
{
	float2 screenSize = worldSettings->camera.screenSize;
	matrix transform = get_transform_matrix(*transformValues);
	matrix worldrot = matrix_rotation(transformValues->rot.xyz);

	Vertex out = vertices[get_global_id(0)];

	vset3(&out, vec_mat_mul(loc(out).xyzz, transform).xyz, 0);
	vset3(&out, vec_mat_mul(normal(out).xyzz, worldrot).xyz, 3);
	vset3(&out, vec_mat_mul(tangent(out).xyzz, worldrot).xyz, 6);
	vset3(&out, vec_mat_mul(binormal(out).xyzz, worldrot).xyz, 9);

	float z = out.vals[2];
	float w = 1 / z;
	out.f16 *= w;
	float2 xy = (float2)(out.vals[0], out.vals[1]);
	vset3(&out, (float3)(xy*w*screenSize + screenSize * 0.5f, (z - 1) / (200 - 1)), 0);
	out.vals[14] = w;

	outVertices[get_global_id(0)] = out;
}
/*
	indices += get_global_id(0) * 3;
	float2 screenSize = _worldSettings->camera.screenSize;

	matrix transform = get_transform_matrix(*transformValues);
	matrix worldrot = matrix_rotation(transformValues->rot.xyz);

	Triangle t;
	for (int i = 0; i < 3; i++) {
		t.edges[i].vertex = vertices[indices[i]];
		t.edges[i].vertex.loc = vec_mat_mul(t.edges[i].vertex.loc, transform);
		t.edges[i].vertex.normal = vec_mat_mul(t.edges[i].vertex.normal, worldrot);

		float4 pt = t.edges[i].vertex.loc;
		t.edges[i].screenPos = (float4)(pt.xy / pt.z * screenSize + screenSize * 0.5f, (pt.z - 1) / (200 - 1), 1 / pt.z);

		t.edges[i].vertex.normal *= t.edges[i].screenPos.w;
		t.edges[i].vertex.uv *= t.edges[i].screenPos.w;
	}

	Vertex p0 = t.edges[0].vertex,
		p1 = t.edges[1].vertex,
		p2 = t.edges[2].vertex;

	if (cross(t.edges[1].screenPos - t.edges[0].screenPos, t.edges[2].screenPos - t.edges[0].screenPos).z <= 0)
	{
		t.isClockwise = false;
		triangles[get_global_id(0)] = t;
	}

	t.isClockwise = true;

	t.pmin = (ushort2)(
		min3(max(0.f, t.edges[0].screenPos.x), max(0.f, t.edges[1].screenPos.x), max(0.f, t.edges[2].screenPos.x)),
		min3(max(0.f, t.edges[0].screenPos.y), max(0.f, t.edges[1].screenPos.y), max(0.f, t.edges[2].screenPos.y))
	);

	t.pmax = (ushort2)(
		max3(max(0.f, t.edges[0].screenPos.x), max(0.f, t.edges[1].screenPos.x), max(0.f, t.edges[2].screenPos.x)),
		max3(max(0.f, t.edges[0].screenPos.y), max(0.f, t.edges[1].screenPos.y), max(0.f, t.edges[2].screenPos.y))
	);

	//for (int i = 0; i < 3; i++)
	//	t.edges[i].vals = (t.edges[(i + 1) % 3].screenPos.yx - t.edges[i].screenPos.yx);


	triangles[get_global_id(0)] = t;
	_worldSettings->triangleCount = get_global_size(0);
}
*/
#ifdef _WIN32

#include "matrix.h"

#endif

float fmin3(float a, float b, float c)
{
	return (a < b && a < c ? a : (b < c ? b : c));
}

float fmax3(float a, float b, float c)
{
	return (a > b && a > c ? a : (b > c ? b : c));
}


float3 sampleTexture(read_only image2d_t tex, const float2 uv)
{
	const sampler_t texsampler = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_NONE | CLK_FILTER_LINEAR;

	float3 color = convert_float3(read_imageui(tex, texsampler, uv).zyx) / 255;

	return color;
}

float3 sampleTextureWithFilter(read_only image2d_t tex, const float2 uv)
{
	return sampleTexture(tex, uv);
}
/*
float3 pixelShader(const Vertex v, const WorldSettings* worldSettings, read_only image2d_t basetex, read_only image2d_t normaltex)
{
	//float4 cameralight = reflect(worldSettings->lightDir, v.normal);
	//float bright = clamp(-cameralight.z, 0.1f, 1.f);

	float3 basecolor = sampleTexture(basetex, v.uv); //(float3)(0.9, 0.94, 0.96);

	float ambient = clamp(-dot(worldSettings->lightDir, v.normal.xyz), 0.1f, 1.f);

	return basecolor * (ambient + 0.1f);
}
*/

float edgeFunction(float3 a, float3 b, float3 c)
{
	return (c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x);
}

int FindNearestVertex(Vertex* vOut, global Pixel* pix, global Vertex* vert, global Vertex* projVert, global uint* indices, int count)
{
	const int2 pos = { get_global_id(0), get_global_id(1) };
	int vFound = 0;

	for (uint i = 0; i < count; i++)
	{
		Vertex v[] = { projVert[indices[i * 3]], projVert[indices[i * 3 + 1]], projVert[indices[i * 3 + 2]] };

		float left = fmin3(v[0].vals[0], v[1].vals[0], v[2].vals[0]);
		if (pos.x < left)
			continue;
		float top = fmin3(v[0].vals[1], v[1].vals[1], v[2].vals[1]);
		if (pos.y < top)
			continue;
		float right = fmax3(v[0].vals[0], v[1].vals[0], v[2].vals[0]);
		if (pos.x > right)
			continue;
		float bottom = fmax3(v[0].vals[1], v[1].vals[1], v[2].vals[1]);
		if (pos.y > bottom)
			continue;

		float w[3];
		w[0] = edgeFunction(loc(v[1]), loc(v[2]), convert_float3(pos.xyx));
		if (w[0] < 0)
			continue;
		w[1] = edgeFunction(loc(v[2]), loc(v[0]), convert_float3(pos.xyx));
		if (w[1] < 0)
			continue;
		w[2] = edgeFunction(loc(v[0]), loc(v[1]), convert_float3(pos.xyx));
		if (w[2] < 0)
			continue;

		float area = 1 / edgeFunction(loc(v[0]), loc(v[1]), loc(v[2]));
		w[0] *= area;
		w[1] *= area;
		w[2] *= area;

		float zCorr = 1 / (w[0] * v[0].vals[14] + w[1] * v[1].vals[14] + w[2] * v[2].vals[14]);
		half z = zCorr * (w[0] * v[0].vals[2] + w[1] * v[1].vals[2] + w[2] * v[2].vals[2]);

		if (z*zCorr >= pix->depth)
			continue;

		pix->depth = z * zCorr;

		vFound = 1;
		*vOut = vadd(vadd(
			vmul(v[0], w[0]),
			vmul(v[1], w[1])),
			vmul(v[2], w[2]));
	}

	return vFound;
}

Triangle calcTri()
{

}

#define sample(t) sampleTexture(t, uv(v))

#define MAT_VARIABLES()			   \
	float3 BaseColor = (float3)0;  \
	float  Metallic = 0.5;         \
	float  Roughness = 0.5;        \
	float3 Normal = normal(v);

//WorldSettings worldSettings = *_worldSettings;

#define MAT_HEADER() \
	const int2 pos = { get_global_id(0), get_global_id(1) }; \
	global Pixel* pix = getPixel(canvas, pos); \
	Vertex v;   \
				\
	if (FindNearestVertex(&v, pix, vert, projVert, indices, worldSettings->triangleCount)) \
	{ \
		MAT_VARIABLES()

#define MAT_FOOTER() \
		float ambient = clamp(-dot(worldSettings->lightDir, Normal), 0.1f, 1.f); \
																				 \
		float3 finalColor = BaseColor * (ambient + 0.1f); \
		pix->color = convert_uchar4((float4)(clamp(finalColor.x * 255, 0.f, 255.f), clamp(finalColor.y * 255, 0.f, 255.f), clamp(finalColor.z * 255, 0.f, 255.f), 255.f));\
	}
	
#define MAT_ARGS() global RenderTexture* canvas, global WorldSettings* worldSettings, global Vertex* vert, global Vertex* projVert, global uint* indices //, global Triangle* tri 
#define MAT_FUNC kernel void 

/*

MAT_FUNC(ab)
{
	MAT_HEADER()




		// $BODY$



	

	
	MAT_FOOTER()
}

*/
/*
void rasterizeOne(const Triangle t, const int2 pos, Pixel* pix, const WorldSettings* worldSettings, read_only image2d_t basetex, read_only image2d_t normaltex)
{
	if (t.pmin.x > pos.x || t.pmin.y > pos.y || t.pmax.x < pos.x || t.pmax.y < pos.y)
		return;

	float area = 1 / edgeFunction(t.edges[0].screenPos, t.edges[1].screenPos, t.edges[2].screenPos);

	float w[3];
	int c = 0;
	for (int i = 0; i < 3; i++)
	{
		w[i] = edgeFunction(t.edges[(i + 1) % 3].screenPos, t.edges[(i + 2) % 3].screenPos, convert_float4(pos.xyxy));
		//(pos.x - t.edges[i].screenPos.x)*t.edges[i].vals.x - (pos.y - t.edges[i].screenPos.y)*t.edges[i].vals.y;
		if (w[i] > 0)
			c++;
		else {
			c--;
			w[i] = -w[i];
		}

		w[i] *= area;
	}

	if (c != 3) //  && c != -3
		return;

	half z = w[0] * t.edges[0].screenPos.z + w[1] * t.edges[1].screenPos.z + w[2] * t.edges[2].screenPos.z;

	float zCorr = 1 / (w[0] * t.edges[0].screenPos.w + w[1] * t.edges[1].screenPos.w + w[2] * t.edges[2].screenPos.w);

	if (z*zCorr >= pix->depth)
		return;

	//float c0[3] = { 255, 0, 0 };
	//float c1[3] = { 0, 255, 0 };
	//float c2[3] = { 0, 0, 255 };

	Vertex v = vadd(vadd(
		vmul(t.edges[0].vertex, w[0]),
		vmul(t.edges[1].vertex, w[1])),
		vmul(t.edges[2].vertex, w[2]));

	v.normal *= zCorr;
	v.uv *= zCorr;

	//float r = w[0] * c0[0] + w[1] * c1[0] + w[2] * c2[0];
	//float g = w[0] * c0[1] + w[1] * c1[1] + w[2] * c2[1];
	//float b = w[0] * c0[2] + w[1] * c1[2] + w[2] * c2[2];

	float3 color = pixelShader(v, worldSettings, basetex, normaltex);

	pix->color = convert_uchar4((float4)(clamp(color.x * 255, 0.f, 255.f), clamp(color.y * 255, 0.f, 255.f), clamp(color.z * 255, 0.f, 255.f), 255.f));
	pix->depth = z * zCorr;
}

kernel void rasterize(global RenderTexture* canvas, global WorldSettings* _worldSettings, global Triangle* t, read_only image2d_t basetex, read_only image2d_t normaltex)
{
	const int2 pos = { get_global_id(0), get_global_id(1) };
	global Pixel* pix = getPixel(canvas, pos);

	Pixel _pix = *pix;
	WorldSettings worldSettings = *_worldSettings;
	for (uint i = 0; i < worldSettings.triangleCount; i++) // worldSettings.triangleCount
		rasterizeOne(t[i], pos, &_pix, &worldSettings, basetex, normaltex);

	*pix = _pix;
}
*/

MAT_FUNC Material_MinionMaterial(MAT_ARGS(), read_only image2d_t T_Minion_Dawn_Melee_D, read_only image2d_t T_Minion_Dawn_Melee_MASK01, read_only image2d_t T_Minion_Dawn_Melee_N) { 
    MAT_HEADER() 
//#MATERIAL
{
	BaseColor = sample(T_Minion_Dawn_Melee_D);

	float3 mask = sample(T_Minion_Dawn_Melee_MASK01);
	Metallic = clamp((float)pow(mask.x, 2), 0.f, 1.f);
	Roughness = mask.y;
	
	Normal = sample(T_Minion_Dawn_Melee_N);
}MAT_FOOTER() }




MAT_FUNC Material_RockMaterial(MAT_ARGS(), read_only image2d_t T_Brick_Clay_Old_D, read_only image2d_t T_Brick_Clay_Old_N) { 
    MAT_HEADER() 
//#MATERIAL
{
	BaseColor = sample(T_Brick_Clay_Old_D);
	Normal    = sample(T_Brick_Clay_Old_N);
}MAT_FOOTER() }